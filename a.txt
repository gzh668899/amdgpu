为什么不更新 rptr
在 amdgpu_ring_commit 中，驱动程序不直接更新 rptr，因为：

GPU 控制读取：rptr 是 GPU 用来读取命令队列的指针，只有 GPU 执行命令时，rptr 才会自动更新。驱动程序负责写入命令到队列并更新 wptr，但是 rptr 更新是由 GPU 硬件管理的。

指针同步：当 GPU 开始读取命令时，它会更新 rptr，确保它与正在执行的命令同步。如果驱动程序直接干预并更新 rptr，可能会破坏这个同步过程。

硬件机制：在 AMDGPU 驱动中，rptr 更新通常是在 GPU 完成一个命令的执行后自动发生的，而驱动程序的职责是确保命令队列可以继续被填充和提交。

总结
amdgpu_ring_commit 函数不更新 rptr，因为 rptr 是由 GPU 自动更新的，而驱动程序主要负责确保命令队列的写入和 wptr 的更新。rptr 更新是在 GPU 消费命令时由硬件控制的，不需要驱动程序手动介入。


amdgpu_ring_commit 函数用于提交命令队列中的命令，确保 GPU 可以执行这些命令，并进行必要的同步。它主要涉及以下几个步骤：对齐命令队列、设置写指针、插入填充命令（NOP），以及可能的资源释放操作。
align_mask 是一个用于对齐操作的掩码，它确保命令队列的写入操作满足硬件要求的对齐大小。
wptr 是写指针，表示队列中的当前写入位置。
(ring->wptr & ring->funcs->align_mask) 计算当前写指针与对齐掩码的余数，得到当前队列对齐的不足部分。
count 计算出需要填充的空间大小，以确保写指针符合对齐要求。
ring->funcs->insert_nop(ring, count) 会向队列中插入填充命令（NOP），以对齐命令队列。

amdgpu_ring_write 函数用于将一个 32 位的数据（v）写入到指定的命令队列（ring）中。这是向 GPU 的命令队列提交命令的操作之一。每次写入时，都会更新命令队列的写指针（wptr）并减少剩余的可用空间。

通过 amdgpu_ring_alloc 分配 3 个双字（32 位）空间，用于写入命令。如果分配失败，释放之前获取的 scratch 寄存器并返回错误。
